//*******print elements of linkedlist*******//
       while(head!= null){
           System.out.println(head.data);
           head = head.next;
           
           
 //**********add node at the tail of LL*//          
           SinglyLinkedListNode newnode =  new SinglyLinkedListNode(data);
        SinglyLinkedListNode temp = head;
        if(head== null){
            head= newnode;
            return head;
        }
        while(temp.next != null){
            temp  = temp.next;
            
        }
         temp.next = newnode;
         
         
        return head;
        
 
    }
    
    
    
    //****************Cycle detection of linked list************//
      static boolean hasCycle(SinglyLinkedListNode head) {

        SinglyLinkedListNode high = head;
        SinglyLinkedListNode low= head;
    
    while( high != null && high.next != null) {
        high = high.next.next;
        low = low.next;
        
        if(low.equals(high)) {
            return true;
        }
    }
    return false;
    }
    
     //******Data at the postion from the tail********//
      
     public static int getNode(SinglyLinkedListNode llist, int positionFromTail) {
    
     List<Integer> nodesList = new ArrayList<>();
        while (llist != null) {
            nodesList.add(llist.data);
            llist = llist.next;
        }
        return nodesList.get(nodesList.size() - positionFromTail - 1);
    }

}

        

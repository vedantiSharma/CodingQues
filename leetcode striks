******************  SPIRAL MATRIX **********
class Solution {
    public int[][] generateMatrix(int n) {
        int x = 1,cnt = 0;
        int[][] ans = new int[n][n];
        int[][] visited = new int[n][n];
        int i = 0,j = 0,k = 0;
        while(cnt < (n * n)){
            if(visited[i][j] == 0){
                ans[i][j] = x++;
                visited[i][j] = 1;
                if(i == k && j < n - 1 - k) j++;
                else if(j == n - 1 - k && i < n - 1 - k) i++;
                else if(i == n - 1 - k && j <= n - 1 - k && j != k) j--;
                else if(i <= n - 1 - k && j == k) i--;
                cnt++;
            }else{ 
                k++;
                i++;
                j++;
            }
        }
        return ans;
    }
}

***********SOLVING QUESTION WITH BRAIN POWER ************

class Solution {
    public long mostPoints(int[][] questions) {
     int s=questions.length;
     long[] dp = new long[s];
     dp[s-1]=questions[s-1][0];
     for(int i=s-2;i>=0;i--){
         int nqp = i+questions[i][1]+1;//next question position
         dp[i] = Math.max(questions[i][0]+(nqp>=s ? 0:dp[nqp]),dp[i+1]);
     }
     return dp[0];
    }
}

**********SWAPPING NODES IN A LINKED LIST**************
class Solution {
    public ListNode swapNodes(ListNode head, int k) {
        ListNode left=head,rigth=head;
        for(int i=1;i<k;i++)
        left=left.next;
        ListNode curr = left;
        while(curr.next!=null){
            curr = curr.next;
            rigth=rigth.next;
        }
        int t = left.val;
        left.val = rigth.val;
        rigth.val =t;
        return head;
    }
}

***********MAXIMZING SCORES AFTER NTH OPERATIONS***************
class Solution {
    public int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}
  public int dfs(int[] n, int[][] dp, int i, int mask) {
    if (i > n.length / 2)
        return 0;
    if (dp[i][mask] == 0)
        for (int j = 0; j < n.length; ++j)
            for (int k = j + 1; k < n.length; ++k) {
                int new_mask = (1 << j) + (1 << k);
                if ((mask & new_mask) == 0)
                    dp[i][mask] = Math.max(dp[i][mask], i * gcd(n[j], n[k]) + dfs(n, dp, i + 1, mask + new_mask));
            }
    return dp[i][mask];
}
    public int maxScore(int[] n) {
      return dfs(n, new int[n.length / 2 + 1][1 << n.length], 1, 0);   
    }
}



***************************  SWAP NODES IN PARIS    ***********************
class Solution {
    public ListNode swapPairs(ListNode head) {
          if (head == null || head.next == null) {
            return head;
        }
    ListNode ans =new ListNode(0);
    ans.next=head;
    ListNode curr=ans;
   while (curr.next != null && curr.next.next != null) {
            ListNode t1 = curr.next;
            ListNode t2 = curr.next.next;
            curr.next = t2;
            t1.next = t2.next;
            t2.next = t1;
            curr = curr.next.next;
        }  
      return ans.next;
    }
}
*************LONGEST PALINDROME BY CONCATENATING TWO LETTER WORDS***********
class Solution {
    public int pairSum(ListNode head) {
    Stack<ListNode> stack=new Stack<>();
    ListNode dummy=head;
    while(dummy!=null){
        stack.push(dummy);
        dummy=dummy.next;
    }
    int max=0;
    while(stack.size()>stack.size()/2){
        max=Math.max(max,head.val+stack.pop().val);
        head=head.next;
    }
    return max;
    }
}

*************Top K Frequent Elements*************

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
         // Count the frequency of each element
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
        
        // Create a min heap (PriorityQueue) to store the k most frequent elements
        PriorityQueue<Integer> minHeap = new PriorityQueue<>((a, b) -> frequencyMap.get(a) - frequencyMap.get(b));
        for (int num : frequencyMap.keySet()) {
            minHeap.offer(num);
            if (minHeap.size() > k) {
                minHeap.poll();
            }
        }
        
        // Build the result array
        int[] result = new int[k];
        for (int i = k - 1; i >= 0; i--) {
            result[i] = minHeap.poll();
        }
        
        return result;
    }
}

**************TOP KTH FREQUENT ELEMENT****************

class KthLargest {
    PriorityQueue<Integer> pq;
    int l;
    public KthLargest(int k, int[] nums) {
      this.l = k;
            pq = new PriorityQueue<>(k);
            for (int num :nums)
                add(num);
    }
    
    public int add(int val) {
      if (pq.size() <l)
                pq.offer(val);
            else if (pq.peek() <val) {
                pq.poll();
                pq.offer(val);
            }
            return pq.peek();
    }
}

***********   REMOVE DUPLICATE FROM ARRAY  ***************
class Solution {
    public int removeDuplicates(int[] nums) {
     int ans =1;
     for(int i =0 ; i<nums.length-1 ; i++){
         if(nums[i] <nums[i+1]){
             nums[ans] = nums[i+1]; 
             ans++;
             
         }
     }
     return ans;
    }
}

************ TIME NEEDED TO INFORM ALL EMPLOYES ************

class Solution {
  private List<Integer>[] adj;

  private int dfs(int id, int[] manager, int[] informTime) {
    var time = 0;

    for (var emp : adj[id])
      time = Math.max(time, dfs(emp, manager, informTime));

    return time + informTime[id];
  }

  public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
    adj = new ArrayList[n];

    for (var i=0; i<n; i++)
      adj[i] = new ArrayList<>();

    for (var i=0; i<n; i++) {
      if (i == headID) continue;
      adj[manager[i]].add(i);
    }
    return dfs(headID, manager, informTime);
  }
}
